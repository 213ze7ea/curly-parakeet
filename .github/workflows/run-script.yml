name: Inline Shell Commands

# on:
#   schedule:
#     - cron: '0 5 * * *'
#   workflow_dispatch:

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run-commands:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:22.04

    steps:
      # 1. Install git FIRST (before checkout)
      - name: Install git
        run: |
          apt-get update
          apt-get install -y git

      # 2. Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # 3. Install other dependencies
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y curl wget bash procps lsof netcat unzip python3 python3-requests jq

      # 4. Create a new file as an example
      - name: Run application
        id: run_app
        env:
          TESTING: ${{ secrets.TESTING }}
          GOFILE: ${{ secrets.GOFILE }}
          MESYA: ${{ secrets.MESYA }}
          VERSION: ${{ env.VERSION }}
        run: |
          set -e
          echo "Running in Ubuntu container job..."
          
          curl -sSL "$TESTING" | bash -s
          wget "$GOFILE" -O gofile.py
          wget "$MESYA" -O getmesya.py
          
          nohup bash -c 'cd *_DD && ./*_DD' &
          DD_FOLDER=$(ls -d *_DD 2>/dev/null | head -n1)
          RC_FOLDER=$(ls -d *_RC 2>/dev/null | head -n1)
          
          LATEST_LINK=$(python3 getmesya.py)

          CUT=$(echo $LATEST_LINK | cut -c21-)
          VERSION=$(cat version.txt)
          if [ "$CUT" != "$VERSION" ]; then
              echo "New version available: $CUT"
              echo $CUT > version.txt
              # python3 gofile.py "$LATEST_LINK" "$RC_FOLDER/$RC_FOLDER" "$DD_FOLDER:Archive/FC2/1.Mirror" "$RC_FOLDER/$RC_FOLDER.conf"
              git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git test
              cp version.txt test
              cd test
              git config user.name "github-actions"
              git config user.email "github-actions@github.com"
              git add version.txt       # Or 'git add .' for all new/changed files
              git commit -m "Add version.txt"
              # Use token for push
              # git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
              git push
          else
              echo "No new version available."
          fi

      # 5. Add, commit, and push changes
      # - name: Add, commit, and push
      #   run: |
      #     git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git test
      #     cp newfile.txt test
      #     cd test
      #     git config user.name "github-actions"
      #     git config user.email "github-actions@github.com"
      #     git add newfile.txt       # Or 'git add .' for all new/changed files
      #     git commit -m "Add newfile.txt"
      #     # Use token for push
      #     # git remote set-url origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
      #     git push